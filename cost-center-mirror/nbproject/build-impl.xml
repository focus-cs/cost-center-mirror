<?xml version="1.0" encoding="UTF-8"?>
<!--
*** GENERATED FROM project.xml - DO NOT EDIT  ***
***         EDIT ../build.xml INSTEAD         ***

For the purpose of easier reading the script
is divided into following sections:

- initialization
- compilation
- jar
- execution
- debugging
- javadoc
- test compilation
- test execution
- test debugging
- applet
- cleanup

-->
<project xmlns:if="ant:if" 
         xmlns:j2seproject1="http://www.netbeans.org/ns/j2se-project/1" 
         xmlns:j2seproject3="http://www.netbeans.org/ns/j2se-project/3" 
         xmlns:jaxrpc="http://www.netbeans.org/ns/j2se-project/jax-rpc" 
         xmlns:unless="ant:unless" 
         basedir=".." 
         default="default" 
         name="cost-center-mirror-impl">
    <fail message="Please build using Ant 1.8.0 or higher.">
        <condition>
            <not>
                <antversion atleast="1.8.0"/>
            </not>
        </condition>
    </fail>
    
    <property name="projectName" value="cost-center-mirror" />
    <property name="src.dir" location="src" />
    <property name="test.dir" location="test" />
    <property name="build.dir" location="bin" />
    <property name="dist.dir" location="dist" />
    <property name="dist.lib.dir" location="dist/lib" />
    <property name="dist.bin.dir" location="dist/bin" />
    <property name="dist.docs.dir" location="dist/docs" />
    <property name="dist.conf.dir" location="dist/conf" />
    <property name="lib.dir" value="lib" />
    <property name="distribution.dir" location="distribution"/>
    <property name="main-class" value="com.schneider.mstt.cost.center.mirror.CostCenterMirror" />

    <property name="build.dir" value="build"/>
    <property name="src.dir" value="src"/>

    <!-- external libraries classpath, we don't need sources and javadoc -->
    <path id="classpath">
        <fileset dir="${basedir}/">
            <include name="${lib.dir}/*.jar" />
            <exclude name="${lib.dir}/*sources.jar"/>
            <exclude name="${lib.dir}/*javadoc.jar"/>
        </fileset>
    </path>

    <!-- To work with external libraries, need classpath to compile -->
    <target name="compile" description="compile the source ">
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" />
    </target>

    <!-- constructs the external libraries classpath name -->
    <pathconvert property="classpath.name" pathsep=" ">
        <path refid="classpath" />
        <mapper>
            <chainedmapper>
                <flattenmapper />
                <globmapper from="*.jar" to="lib/*.jar" />
            </chainedmapper>
        </mapper>
    </pathconvert>

    <target name="copy-dependencies">
        <copy todir="${dist.lib.dir}">
            <fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
        </copy>
    </target>

    <!-- jar it, and declares the ext libraries in manifest.mf file -->
    <target name="jar" depends="compile, copy-dependencies" description="package, output to JAR">

        <echo message="classpath.name : ${classpath.name} " />

        <mkdir dir="${dist.dir}" />
        <mkdir dir="${dist.lib.dir}" />
        <mkdir dir="${dist.bin.dir}" />
        <mkdir dir="${dist.docs.dir}" />
        <mkdir dir="${dist.conf.dir}" />

        <jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}" />
                <attribute name="Class-Path" value="${classpath.name}" />
            </manifest>
        </jar>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>
    
    <!-- Default, run this -->
    <target name="main" depends="clean, compile, jar, copy-resources" />

    <target name="copy-resources" description="copy Java resources like xml and properties files">
        <copy todir="${dist.conf.dir}">
            <fileset dir="${basedir}/conf/dev">
                <include name="**/*.properties" />
            </fileset>
        </copy>
        <copy todir="${dist.lib.dir}">
            <fileset dir="${basedir}/lib">
                <include name="**/*.exe" />
            </fileset>
        </copy>
        <copy todir="${dist.bin.dir}">
            <fileset dir="${distribution.dir}/bin">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${dist.docs.dir}">
            <fileset dir="${distribution.dir}/docs">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>
    
</project>
